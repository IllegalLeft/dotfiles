#!/bin/bash

DIR_THEMES="$HOME/.config/zenbu/variable_sets"
DIR_FONTS="$DIR_THEMES/fonts"
FILE_THKEMER="$HOME/.thkemer"

# figure out current theme & font from .thkemer file
CURRENT_FONT=$(sed -n 's/^font=\(.*\)$/\1/p' $FILE_THKEMER)
CURRENT_THEME=$(sed -n 's/^theme=\(.*\)$/\1/p' $FILE_THKEMER)

NEW_FONT=
NEW_THEME=

usage()
{
    echo "Usage: thkemer [OPTIONS] [MODE]"
    echo "Change zenbu/rhisk theme."
    echo ""
    echo "  -h, --help      this usage info"
    echo ""
    echo "Modes"
    echo "  all             change all the possible elements"
    echo "  font            change the font only"
    echo "  theme           change the colors only, this is the default mode"
}

asktheme()
{
    NEW_THEME=$(find $DIR_THEMES -maxdepth 1 -type f -printf '%f\n' | sed -e 's/\.yaml$//' | rofi -dmenu -p "Theme: ")
}

askfont()
{
    NEW_FONT=$(find $DIR_FONTS -maxdepth 1 -type f -printf '%f\n' | sed -e 's/\.yaml$//' | rofi -dmenu -p "Font: ")
}


# more than 2 arguments is a problem...
if [ "$#" -gt 1 ]; then
    echo "More than 1 argument."
    echo ""
    usage
    exit 1
fi

# handle arguments
if [ "$#" -eq 0 ]; then
    asktheme
else
    case $1 in
        -h | --help )
            usage
            exit
            ;;
        all )
            askfont
            asktheme
            ;;
        font )
            askfont
            ;;
        theme )
            asktheme
            ;;
        * )
            echo "Unrecognized option."
            echo ""
            usage
            exit 1
            ;;
    esac
fi

# if new theme is not empty, set it to the current
if [ -n "$NEW_THEME" ]; then
    CURRENT_THEME=$NEW_THEME
fi
# if new font is not empty, set it to the current
if [ -n "$NEW_FONT" ]; then
    CURRENT_FONT=$NEW_FONT
fi

# set theme
echo "Changing theme to $CURRENT_THEME & $CURRENT_FONT..."
rhisk $CURRENT_THEME $CURRENT_FONT

#write currents to thkemer file
cat > $FILE_THKEMER << EOL
theme=${CURRENT_THEME}
font=${CURRENT_FONT}
EOL
